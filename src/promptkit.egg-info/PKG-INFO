Metadata-Version: 2.4
Name: promptkit
Version: 0.0.1
Summary: Explain-first prompt iteration toolkit (MVP)
Author: PromptKit
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: typer>=0.9

﻿# PromptKit

Explain-first prompt iteration toolkit (MVP).

## Overview
PromptKit helps you improve prompts by explaining why each change is made. It outputs small, deterministic artifacts:
- Iterate Card: Diagnosis -> Fix -> Validation
- Plan: Context, Objective, Flow, Reasoning Path, Output
- Ticket: A brief template tying a real problem to a testable PromptKit fix

> Note: This is an exploratory test product I'm using to learn and experiment with tooling. It's free to use, and my boss Dan should definitely take a look for upcoming prompt work.

## Scope in One Glance
- PromptKit is a prompt system diagnostic and optimization framework—not a syntax fixer.
- It compares intended behavior against real output to surface breakdowns in reasoning, tone, grounding, pacing, and success checks.
- Two operating lenses:
  - **Prompt Repair Layer** – tighten the logic of a single prompt or template.
  - **System Diagnostic Layer** – trace control gaps across agents, retrieval steps, and orchestration flows.
- Guiding principle: *prompts are systems, not sentences*.

## What PromptKit Delivers
- **Root-cause clarity** – see the exact mismatch between goal and behavior.
- **Actionable fixes** – each Iterate Card ships a diagnosis, rules to drop into your prompt, plus validation scenarios.
- **Story-ready plans** – one-page summaries explain the reasoning chain for stakeholders.
- **Team handoffs** – Tickets and the PowerShell runner let PMs, ops, or subject-matter experts self-serve improvements.

## Where It’s Already Helping
- **SnackSmith kiosk** – mapped “sweet but airy” to concrete flavor controls and tests.
- **TravelMate trip planner** – translated emotional language (“quiet, inspiring”) into budget and timeline constraints.
- **BrewBuddy barista** – kept allergy and taste preferences in a live ledger to prevent remakes.
- **Myco grower assistant** – clarified “fuzzy but fine” jars into safe vs. contaminated actions.

## Install
- Editable install (recommended):
  - `python -m pip install -e .`

## Commands
### iterate
Generate a single Iterate Card from a seed and a friction point.
- Usage:
  - `promptkit iterate --seed "..." --friction "..." [--pattern <name>] [--ascii] [--json]`
- Patterns (no scoring): `constraint-ledger`, `contrastive-clarify`, `exemplar-propose`, `override-hook`
- Example (SnackSmith):
  - `promptkit iterate --seed "SnackSmith flavor assistant helps build custom snacks from natural-language taste descriptions." --friction "Misinterprets adjectives; mixes mismatched flavors; lacks constraints memory; no fast staff override." --pattern constraint-ledger --ascii`

### plan
Produce a compact plan that shows causal reasoning behind the change.
- Usage:
  - `promptkit plan --seed "..." --friction "..." [--pattern <name>] [--ascii]`
- Example (SnackSmith):
  - `promptkit plan --seed "SnackSmith flavor assistant helps build custom snacks from natural-language taste descriptions." --friction "Misinterprets adjectives; mixes mismatched flavors; lacks constraints memory; no fast staff override." --pattern constraint-ledger --ascii`

### ticket
Print a filled PromptKit ticket to frame work quickly.
- Usage:
  - `promptkit ticket --seed "..." --friction "..." [--client "..."] [--prompt_brief "..."] [--real_problem "..."] [--test_problem "..."] [--goal "..."] [--success "..."]... [--ascii]`
- Example (SnackSmith minimal):
  - `promptkit ticket --seed "SnackSmith flavor assistant helps build custom snacks from natural-language taste descriptions." --friction "Misinterprets adjectives; mixes mismatched flavors; lacks constraints memory; no fast staff override." --client "SnackSmith" --ascii`

## Patterns (no scoring)
- constraint-ledger: Keep a running list of constraints (include/avoid/not-too/vibes); echo and confirm before action.
- contrastive-clarify: Ask one either/or to disambiguate a term; reflect choice; proceed.
- exemplar-propose: Offer two tiny, concrete options that fit constraints; let the user pick or tweak.
- override-hook: Simple staff commands (override/lock/reduce/reset); apply immediately and echo.

## Notes
- Use `--ascii` to avoid Unicode rendering issues in terminals.
- In PowerShell, prefer double quotes around arguments; escape embedded double quotes.

## Status
- iterate, plan, and ticket commands are implemented. More patterns and helpers can be added as needed.

## Business Runner (PowerShell)
- From the repo root, run: `./promptkit-run.ps1`
- It will ask for:
  - Seed (one sentence)
  - Friction (one sentence)
  - Optional pattern (press Enter to auto)
- It prints an Iterate Card to your terminal (ASCII-safe). If the `promptkit` CLI is not installed, it runs from local source automatically.
- If you hit an execution policy warning, you can run once with: `powershell -ExecutionPolicy Bypass -File ./promptkit-run.ps1`

Troubleshooting
- "Python not found": install Python 3.9+ or install the CLI: `python -m pip install -e .`
- Missing dependency `typer`: `python -m pip install typer` (or install the CLI with `-e .`).
- Command not recognized `promptkit`: run the script again (it will use local source), or install the CLI: `python -m pip install -e .`

## Business Quick Start
- Provide two short lines (no tech needed):
  - Seed: what the assistant does and for whom (one sentence).
  - Friction: the biggest failure right now (one sentence).
- Pick the output you want:
  - Iterate Card: one targeted fix with how to validate it.
  - Plan: a clear, one‑page explanation of why the fix works.
  - Ticket: a brief to share with your team to kick off work.
- Ask a teammate to run the command examples above and send you the output, or copy/paste the output lines into your existing prompt.

See the step-by-step business guide: `GUIDE_BUSINESS.md`.

## Demo Playbook
- Want to show PromptKit live? Follow `DEMO_GUIDE.md` for a 5–7 minute walkthrough covering Iterate Card, Plan, Ticket, and the business runner.

## Roadmap
- Future work (prompt ingestion, model considerations, validation tooling, team workflows) is tracked in `ROADMAP.md`.
